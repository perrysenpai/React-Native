Props vs State
props: all about communicating data from parent to child
state:tracking a single piece of data that whenever changes we want to update what appears on screens


hook: hook is a fxn that adds a new fxnality to a funcitonality component.

A project can be generated using twi cmd line tools:
expo-cli
react-native cli


inside cmd: npx expo-cli init food

React Navigation: vid 84
to install react navigator : npm install react-navigation



LECTURE 85:
React Navigation Fix
React Navigation has changed a bit since their recent v.4.0.0 release:

https://github.com/react-navigation/react-navigation/releases/tag/v4.0.0

We must now install three libraries separately. In your terminal run the following command:

npx expo-cli install react-native-gesture-handler react-native-reanimated react-navigation-stack
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context

Same for TabsNavigator (used a little bit later in this module):

npm install --save react-navigation-tabs
import { createBottomTabNavigator } from 'react-navigation-tabs';
And also for DrawerNavigator (also used later in this module):

npm install --save react-navigation-drawer
import { createDrawerNavigator } from 'react-navigation-drawer';

Our imports in the upcoming lecture will now look like this:

import { createAppContainer } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack';


TO install a screen make a new folder src/srcreens


to use an icon in an expo-cli project check for expo/vector-icons search for the symbol and use it as 
import {Feather} from '@expo/vector-icons';
inside jsx  <Feather name='search' size={30}/>



Anytime we want a make a network request from react native app we have many options: two of these are
1. fetch
2. axios

to insall axios

*/////////////any netwrok request is async operation.*///////////////
SEE LECTURE 95


We use useEffect hook to allow some piece of code to run only once when the app is ran first time. it takes two arguments
1.  useEffect(()=>{}) every time the component is rendered.
2.  useEffect(()=>{}, [])  run the arrow fxn only once when first rendered.
3.  useEffect(()=>{}, [value]), run at first render and every time the 'value' chnges

useEffect(()=>{
        searchApi('pasta');
      },[]);


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
anytime it feels like the view is cutting off the screen we will use flex:1
also , view can sometime expand or shrink , so what we can do is to use <></> instead of view which can solve a lot of our problems.



Navigation: if we want to go to a screen from a particular screen we have to use the props.navigate , but what if this screen is no the home screen
then what we do is pass on this navigation as a prop to its childs so that we can use it from over there.

Or another thing that could be done is 
import {withNavigation}  from 'react-navigation';
we can use withNavigation function that resturns special version of our component that has navigation .
<TouchableOpacity onPress={()=> navigation.navigate('ResultsShow', {id:item.id})}>
{/*when our results show screen is displayer it woll have an extra info of item id*/ }



CONTEXTS:  SImilar to props. by using props we can send info from parent to immediate child and to tranfer info to grandchild we hve to first send info
to child and from child to grandchild.
this is not the case with props.
However it is a lil bit complicated to set up and has some specual terms
Context is just about moving data


we can send data through navigation.navigate to pther screen 
navigation.navigate('Show',{id: item.id})

to retruve it in other screen we use navigation.getParam('id')

Every time we start out blogpost app out posts are gone so we ned somewhere to store those. We use json server which is not good for production but good for dev purpose

we will insatll ngrok which is a server which makes the services runnign on computer with outside world
to set up json server: we make a new directory or folder inside the  workspace not inside the app folder and install as shown in sec13 154


react-natve-elemennts can be used to have more custom built functions with some oredefined styles

we used navigation.addlistener('didfocus') property to see is current screeen was being fooucsed, alternatively we can use NavigationEvenets
as shown inlecture 212


we can use SafeAreaView lecture 216 , to make sure our view is not overlapped by the top status bar of phone

maps library :npx expo-cli install react-native-maps
we use expo-location:used to track user loc
npx expo-cli insatll expo-location

to reset permissions:adb shell pm reset-permissions

we can use a third way called  withNaviagtioFocus vid 233




********************************************************************
another tut
when not using flatlist , if we want to render array say listgoals items on screens we can use
       <View>
        {listgoals.map((goals)=> <Text>{goals}</Text>)}
      </View>
IMPORTANT XXX: if we want to add a text( from textinput) to an array , ALWAYS make an additional function , and pass that to the onPress prop, 
               like :
               
  const listhandler=()=>{
    setListGoals((listgoals)=>[...listgoals,inputText])
  }
  <Button title="press" onPress={listhandler}/>
  
  also 
  ALWAYS dont do setListGoals([...listgoals,inputText])
  do setListGoals((listgoals)=>[...listgoals,inputText])   because it works %
               
               
 FlatList: <FlatList  
                data={listgoals}
                renderItem={({item})=><Text>{item.index}</Text>}
                keyExtractor={(item, index)=>item.id}
           />
           
           each array element of listgoals is as {value: inputText, id : Math.random().toString() }
           we can have more that one columns, i.e a grid by default it is one. we use
           <FlatList numColumns={2}/>
           
   useRef hook: allows to create object to bind to input elements, BUT HERE WE USE IT FOR:
   *****It allows us to define a value that survive component RERENDERS.
   
UseEffect Hook: it has two parts 
useEffect(()=>{
        if(currentGuess===userChoice)
        {
            onGameOver(rounds);
        }
    }, [currentGuess, userChoice, onGameOver]);
1. function
2. dependencies: whenever any of these values change the function of useEffect is executed
                 dont use props.userChoice etc otherwise whenever props change the function is run. so better do 
                 const {userChoice, onGameOver}=props;
                 and then pass on the destructured values to the dependencies of the hooks
   
while styling images if we want a circular image then wrap the image inside the View component and then make height and width equal say 300
and then set borderRadius=half i.e 150 . now still the bounries are set for view but the image exceed the boundries. For this we can  make use
of the styling property *********overlay: "hidden"
 //any child inside container that would break out of boundries container is cut off
 
 //source={{uri:"image url "})} is used for network image


We can nest Text Components inside each other and style them accordingly, nested Text Components are passed down to children unlike the View Components .

the Dimaensions object from 'react-native' lets us allow how much pixels we have available from the screen height and width
import {Dimensions} from 'react-native'
inside stylesheet{
        button:{
                width:Dimmensions.get("window").width/4
        }
}



DEVICE ORIENTATION: In app.json we can look for the orientation which is set to portrait b default , it can be set to "default" to make sure that our 
application is rotatable.

when we rotate the device the above width of button on line 187 is only calculated when we start the device, if device is in portrait then width is calculated accourdingly 
and if it is landscape then acc. to that.
The simple fix for that , i.e we want it to be recalculated when orientation changes then we should not use Dimesions-width fetaure , but manage the width 
through state like this
const[buttonwidth, setWidth= useState(Dimmensions.get("window").width/4)
const updateLayout=()=>{
        setWidth(Dimmensions.get("window").width/4);
}
Dimensions.addEventListner("change", updateLayout) // this is called automagically when we rotate the device
now <Button style={{width: buttonwidth
PROBLEM: whenever we are roatting the device we are at the moment creating new eventListners on the go. So  cleaner code would be to   
         remove the previous EventListner , this can be done with useEffect, so that on every rerender we remove the previous listener and
         add a new one.
         
         useEffect(()=>{
                const updateLayout=()=>{
                        setWidth(Dimmensions.get("window").width/4);
                }
                Dimensions.addEventListner("change", updateLayout)
                return()=>{
                        Dimensions.removeEventListner("change", updateLayout)
                }
                // this return function is executed right before useEffect each time.
         })


KeyBoardAvoiding from react native is used is used to wrap our component to make sure that our keyboard when it opens up never overlays the input that
we type in.

USAGE: <KeyBoardAVoidingView behavior="position/" KeyboardVerticalOffset= />

if we want different thing to appear on roatating the device then , we can use if statetment:
const App=()=>{
      if(Condition)
      {
        return <View></View>
      }
      else
      return <View></View>
}


import {ScreenOrientation} from "expo"
it has various features like , if we want to lock screen to be non rotatable, we can add
ScreenOrientation.lockAsync(ScreenOrientatiton.OrientationLock.Portrait}
ScreenOrientation.getOrientationAsync() // to get the Screen Orientation


PLATFORM API: helps to find out the platform we are running the app on
We can use use it in styling different for both OS.
e.g
Syles=StyleSheet.create({
        viewStyle:{
                backgroundColor: Platform.OS==="android"? "white": "black;
        }
});


We can do is if if we have a basic style for both and specific style for android and ios like this:

base:{
        
}
iosStyle:{

} 
androidStyle:{

}

then we can do like this : <View style={{...Syles.base, Platform.select({ios: Styles.iosStyle, android: Styles.android})  }}>

React native has TouchableNativeFeedback for android which has ripple effect on click:
USAGE: let ButtonComponent=TOuchableOpacity
        if(Platform.OS==="android" && Platform.Version>=21)
        {
                ButtonComponent=TouchableNativeFeedback
        }
        <ButtonComponent />
        
        we can add a <VIEW> outside this ButtonComponent and make overflow: "hidden" if we have a cicular button.
        
  We can split our file into MainScreen.ios.js and  MainScreen.android.js. and on import we DONT need to do import MainScreen from "../screens/MainScreen.ios"
  but directyly  "../screens/MainScreen", REACT automatically imports correct acc to the platofrm
  
  FONTS: to use different fonts, we need the ttf file firstly, then we need to do:
  
  import * as Font from "expo-font"
  import {AppLoading} from "expo"
  
  const fetchFonts =()=>{
        return Font.loadAsync({
        "open-sans":require("./loaction/OpenSans-Regular.ttf"),
        "open-sans-bold":require("./loaction/OpenSans-bold.ttf"),
  })}
  
  inside the component:{  // we check if fonts are loaded, initally they are not
        const [fontLoaded, setFontLoaded]=useState(false);
        if(!fontLoaded)
        {
                return(
                        <Apploading 
                                      startAsync=(fetchFonts)
                                      onFinish={()=>setFontLoaded(true}}
                        />
                        //Apploading must always have two things startAsync which starts a function that returns a promise(value)
                          onFinish which does a thing that must be done after the function is done
                )
        }
        
        return(
                <View style={styles.container}>
                        <Text>Open up App.js to start working on your app!</Text>
                </View>
        )

  }
  
  REACT NAVIGATION: we can use props.navigation.push("CategoryMeals") instead of props.navigation.navigate("CategoryMeals");
                    push is useful when we want ot go to a page we already are on .
                    
                    Sometimes we need that when we press a save button state config is saved and we atomatically go backk to 
                    the previous screen. without pressing the back button.
                    navigation.navigate.goBack() can be used in all the navigators
                    also can use navigate.pop(); though it cant be used in othert navigators but stack nav only
                    navigate.popToTop() takes to our root screen.
                    navigate.replace("screenname") and has no other screen, can be used in sign in screen 
                    when user is signed in, user shouldnt be allowed to go back to login screen.
                    
we can provide header to each page using 
CategoriesScreen.navigationOptions={
    headerTitle:" Meal Categories",
};
 
other than that we can also have in our navigator.js file navigatioOptions setup like this:

const MealsNavigator=createStackNavigator({
    Categories:  CategoriesScreen,
    CategoryMeals:{ 
                   screen: CategoriesMealsScreen ,
                   navigationOptions:{
                                      headerTitle:" Meal Categories",
                                      };
                   }, 
    MealDetail:MealDetailScreen
},{    
        XXXXXXXPARAMETERS HEREXXXXXXXXXX
        defaultNavigationOptions:{  // THESE ARE MERGED WITH INDIVIDUAL NAVIGATION OPTIONS
        headerStyle:{
            backgroundColor:colors.primaryColor
        },
        headerTintColor:"white"
    }
});

XXXXXXXPARAMETERS HEREXXXXXXXXXX:       we can have here mode:"modal" which gives us a different effect on navigation from screen to screen.
                                                         initalRouteName:"MealDetails" // cam be used if not want the first key 
 
OTHER IMPORTANT THING TO DO WITH REACT NAVIAGTION: npm install react-native-screens. which allows to ensure that under the hood, that rn uses
native optimised screen component provided by android and ios. like fragment on android and UIviewController on ios. its good practice.
to use it
import {useScreens} from "react-native-screens"

useScreens() // run just after imports in App,js

const App=()=>{

}

USING ICONS IN HEADERS: Using Custom Header 
npm install --save react-navigation-header-buttons


in HeaderButton.js
import { HeaderButton } from "react-navigation-header-buttons";
import { Ionicons } from "@expo/vector-icons";
const CustomHeaderButton = (props) => { 
    return <HeaderButton {...props} IconComponent={Ionicons} iconSize={23} color={Colors.primaryColor}/>  //..props is used to forward all the props
}
export default CustomHeaderButton;


In a Screen file:
import { HeaderButtons, Item } from "react-navigation-header-buttons";
import { HeaderButton} from "../components/HeaderButton"

Screen.navigationOptions = navigationData => {
  return {
    headerTitle: "HesoYam,
    headerRight: <HeaderButtons HeaderButtonComponent={HeaderButton}>
      <Item title="Favorite" iconName="ios-star" onPress={() =>{}} />
    </HeaderButtons>
  };
};



BottomTabNavigator:

const MealsFavTabNavigator = createBottomTabNavigator({
  Meals: MealsNavigator,   //MealsNavigator is the stack navigator
  Favorites: FavoritesScreen
}, {
    tabBarOptions: {  //manipulating our tab bar , instead we can use other options , see docs
      
    }
});
https://reactnavigation.org/docs/en/bottom-tab-navigator.html


When defining a navigator, you can also add navigationOptions to it:

const SomeNavigator = createStackNavigator({
    ScreenIdentifier: SomeScreen
}, {
    navigationOptions: {
        // You can set options here!
        // Please note: This is NOT defaultNavigationOptions!
    }
});
Don't mistake this for the defaultNavigationOptions which you could also set there (i.e. in the second argument you pass to createWhateverNavigator()).



npm install react-navigation-paper
npm install react-navigation-material-bottom-tabs.
